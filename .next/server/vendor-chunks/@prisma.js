"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma";
exports.ids = ["vendor-chunks/@prisma"];
exports.modules = {

/***/ "(rsc)/./node_modules/@prisma/extension-accelerate/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@prisma/extension-accelerate/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FETCH_FAILURE_MESSAGE: () => (/* binding */ x),\n/* harmony export */   makeAccelerateExtension: () => (/* binding */ T),\n/* harmony export */   withAccelerate: () => (/* binding */ k)\n/* harmony export */ });\n/* harmony import */ var _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client/scripts/default-index.js */ \"@prisma/client/scripts/default-index.js\");\n\nfunction f(a, n) {\n    let [c = 0, u = 0, m = 0] = a.split(\".\").map(Number), [o = 0, h = 0, i = 0] = n.split(\".\").map(Number), r = o - c, e = h - u, t = i - m;\n    return r || e || t;\n}\n\nfunction p() {\n    let a = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.prismaVersion;\n    return [\n        F(),\n        `PrismaEngine/${a.engine}`,\n        `PrismaClient/${a.client}`\n    ].join(\" \");\n}\nfunction F() {\n    return typeof navigator < \"u\" ? navigator.userAgent : typeof process < \"u\" && typeof process.versions < \"u\" ? `Node/${process.versions.node} (${process.platform}; ${process.arch})` : \"EdgeRuntime\" in globalThis ? \"Vercel-Edge-Runtime\" : \"UnknownRuntime\";\n}\nvar P = \"@prisma/extension-accelerate\", x = \"Unable to connect to the Accelerate API. This may be due to a network or DNS issue. Please check your connection and the Accelerate connection string. For details, visit https://www.prisma.io/docs/accelerate/troubleshoot.\";\nfunction b(a) {\n    let n = p(), c;\n    return async (u)=>{\n        let { args: m } = u, { cacheStrategy: o, __accelerateInfo: h = !1, ...i } = m, r = null, { __internalParams: e, query: t } = u;\n        return e.customDataProxyFetch = ()=>async (s, d)=>{\n                let A = new Array;\n                typeof o?.ttl == \"number\" && A.push(`max-age=${o.ttl}`), typeof o?.swr == \"number\" && A.push(`stale-while-revalidate=${o.swr}`);\n                let y = o?.tags?.join(\",\") ?? \"\";\n                d.headers = {\n                    ...d.headers,\n                    \"cache-control\": A.length > 0 ? A.join(\",\") : \"no-cache\",\n                    \"user-agent\": n,\n                    ...y.length > 0 ? {\n                        \"accelerate-cache-tags\": y\n                    } : {}\n                }, c && (d.headers[\"accelerate-query-engine-jwt\"] = c);\n                try {\n                    let g = await a(s, d);\n                    return r = {\n                        cacheStatus: g.headers.get(\"accelerate-cache-status\"),\n                        lastModified: new Date(g.headers.get(\"last-modified\") ?? \"\"),\n                        region: g.headers.get(\"cf-ray\")?.split(\"-\")[1] ?? \"unspecified\",\n                        requestId: g.headers.get(\"cf-ray\") ?? \"unspecified\",\n                        signature: g.headers.get(\"accelerate-signature\") ?? \"unspecified\"\n                    }, c = g.headers.get(\"accelerate-query-engine-jwt\") ?? void 0, g;\n                } catch  {\n                    throw new Error(x);\n                }\n            }, h ? {\n            data: await t(i, e),\n            info: r\n        } : t(i, e);\n    };\n}\nfunction T(a) {\n    let n = f(\"5.1.0\", _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.prismaVersion.client) >= 0;\n    return _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.defineExtension((c)=>{\n        let { apiKeyPromise: u, baseURL: m } = S(c), o = b(a);\n        async function h(r) {\n            let e = await u;\n            if (!e) return {\n                requestId: \"unspecified\"\n            };\n            let t;\n            try {\n                t = await a(new URL(\"/invalidate\", m).href, {\n                    method: \"POST\",\n                    headers: {\n                        authorization: `Bearer ${e}`,\n                        \"content-type\": \"application/json\"\n                    },\n                    body: JSON.stringify(r)\n                });\n            } catch  {\n                throw new Error(x);\n            }\n            if (!t?.ok) {\n                let s = await t.text();\n                throw new Error(`Failed to invalidate Accelerate cache. Response was ${t.status} ${t.statusText}. ${s}`);\n            }\n            return t.body?.cancel(), {\n                requestId: t.headers.get(\"cf-ray\") ?? \"unspecified\"\n            };\n        }\n        let i = c.$extends({\n            name: P,\n            query: {\n                $allModels: {\n                    $allOperations: o\n                }\n            }\n        });\n        return i.$extends({\n            name: P,\n            client: {\n                $accelerate: {\n                    invalidate: (r)=>h(r),\n                    invalidateAll: ()=>h({\n                            tags: \"all\"\n                        })\n                }\n            },\n            model: {\n                $allModels: {\n                    aggregate (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.aggregate(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.aggregate({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    },\n                    count (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.count(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.count({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    },\n                    findFirst (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.findFirst(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.findFirst({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    },\n                    findFirstOrThrow (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.findFirstOrThrow(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.findFirstOrThrow({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    },\n                    findMany (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.findMany(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.findMany({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    },\n                    findUnique (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.findUnique(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.findUnique({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    },\n                    findUniqueOrThrow (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.findUniqueOrThrow(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.findUniqueOrThrow({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    },\n                    groupBy (r) {\n                        let e = _prisma_client_scripts_default_index_js__WEBPACK_IMPORTED_MODULE_0__.Prisma.getExtensionContext(this), t = n ? e.$parent[e.$name] : i[e.name], s = t.groupBy(r);\n                        return Object.assign(s, {\n                            withAccelerateInfo () {\n                                return t.groupBy({\n                                    ...r,\n                                    __accelerateInfo: !0\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    });\n}\nfunction S(a) {\n    let n = Reflect.get(a, \"_accelerateEngineConfig\");\n    try {\n        let { host: c, hostname: u, protocol: m, searchParams: o } = new URL(n?.accelerateUtils?.resolveDatasourceUrl?.(n));\n        if (m === \"prisma+postgres:\" && (u === \"localhost\" || u === \"127.0.0.1\")) return {\n            apiKeyPromise: Promise.resolve(o.get(\"api_key\")),\n            baseURL: new URL(`http://${c}`)\n        };\n    } catch  {}\n    return {\n        apiKeyPromise: a._engine.start().then(()=>a._engine.apiKey?.() ?? null),\n        baseURL: new URL(\"https://accelerate.prisma-data.net\")\n    };\n}\nfunction k(a) {\n    let n = a?.fetch ?? fetch;\n    return T(n);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@prisma/extension-accelerate/dist/index.js\n");

/***/ })

};
;